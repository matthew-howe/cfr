{"version":3,"sources":["rps/store.js","rps/components/villStratForm.js","rps/components/regretVisualizer.js","rps/RPSSolverSelfTrain.js","rps/index.js","kuhn/KuhnSolver.js","kuhn/index.js","components/navbar.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["UPDATE_REGRETS","initialState","count","regrets","VillainStratForm","strat","handleSubmit","handleChange","evt","className","onSubmit","type","id","value","toFixed","onChange","RegretVisualizer","prevProps","this","props","map","el","regretsRock","name","data","regretsPaper","regretsScissors","i","key","allRegrets","console","log","Component","connect","state","rps","RPSSolverSelfTrain","villainStrategy","setRegretSum","strategy","regretSum","strategySum","bind","villStrategy","villRegretSum","villStrategySum","normalizingSum","randomStrat","getRandomStrat","normalizingSumOpp","rand","Math","random","cumulativeProbability","iterations","heroAction","villainAction","actionUtility","villActionUtility","getStrategy","getAction","getVillStrategy","j","action1","action2","action3","sum","avgStrategy","reduce","a","b","updateRegrets","useState","villStrat","setVillStrat","setIterations","shouldRun","setShouldRun","monkey","rerender","avgStrat","solver","RPSSolver","train","getAvgStrategy","onClick","target","setStrat","KuhnSolver","KuhnSolverInterface","hello","repeat","Navbar","selected","setSelected","text","idx","styling","App","solvers","currentSolver","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","newState","Object","assign","push","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","createLogger","collapsed","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3c5c72e.chunk.js","sourcesContent":["const UPDATE_REGRETS = 'UPDATE_REGRETS';\n\nconst initialState = {\n  count: 0,\n  regrets: [],\n};\n\nexport const updateRegrets = (regrets) => ({\n    type: UPDATE_REGRETS,\n    regrets: regrets,\n});\n\n\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_REGRETS:\n      let newState = Object.assign({}, state)\n      newState.regrets.push(action.regrets);\n      newState.count = state.count +1;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nexport default function VillainStratForm({strat}) {\n  function handleSubmit() {}\n\n  function handleChange(evt) {}\n  return (\n    <div className=\"rps-form\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            id=\"rfreq\"\n            value={strat[0].toFixed(2)}\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            id=\"pfreq\"\n            value={strat[1].toFixed(2)}\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            id=\"sfreq\"\n            value={strat[2].toFixed(2)}\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n    </div>\n  );\n}\n","import React, { useState, Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { LineChart, PieChart } from 'react-chartkick'\nimport 'chart.js'\n\nclass RegretVisualizer extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n    }\n  }\n\n  renderRegrets(regrets) {\n    return regrets.map(el => {\n      return (\n        <div>\n          <span>\n            {el[0]}\n            </span> \n          <span>\n            {el[1]}\n            </span> \n          <span>\n            {el[2]}\n            </span>\n          </div>\n      )\n    })\n  }\n\n  render() {\n    const regretsRock = {name: \"Rock\", data: {}}\n    const regretsPaper = {name: \"Paper\", data: {}}\n    const regretsScissors = {name: \"Scissors\", data: {}}\n    let i = 0;\n    for (const key in this.props.regrets) {\n      regretsRock.data[i] = this.props.regrets[key][0];\n      regretsPaper.data[i] = this.props.regrets[key][1];\n      regretsScissors.data[i] = this.props.regrets[key][2];\n      i++\n    }\n    const allRegrets = [regretsRock, regretsPaper, regretsScissors];\n    console.log(allRegrets);\n\n    return <LineChart data={allRegrets} />\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    regrets: state.rps.regrets\n  }\n}\n\nexport default connect(mapState)(RegretVisualizer);\n","const ROCK = 0;\nconst PAPER = 1;\nconst SCISSORS = 2;\n\nclass RPSSolverSelfTrain {\n  constructor(villainStrategy, setRegretSum) {\n    this.strategy = [0, 0, 0];\n    this.regretSum = [0, 0, 0];\n    this.strategySum = [0, 0, 0];\n    this.villainStrategy = villainStrategy;\n    this.setRegretSum = setRegretSum.bind(this);\n\n    this.villStrategy = [0, 0, 0];\n    this.villRegretSum = [0, 0, 0];\n    this.villStrategySum = [0, 0, 0];\n  }\n\n  getStrategy() {\n    let normalizingSum = 0;\n\n    for (let i = 0; i < 3; i++) {\n      this.strategy[i] = this.regretSum[i] > 0 ? this.regretSum[i] : 0;\n      normalizingSum += this.strategy[i];\n    }\n\n    if (normalizingSum === 0) {\n      let randomStrat = this.getRandomStrat();\n      console.log('New random strat created: ', randomStrat);\n      this.strategy = randomStrat;\n      normalizingSum = 1;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      this.strategy[i] /= normalizingSum;\n      this.strategySum[i] += this.strategy[i];\n    }\n    return this.strategy;\n  }\n\n  getVillStrategy() {\n    let normalizingSumOpp = 0;\n    for (let i = 0; i < 3; i++) {\n      this.villStrategy[i] =\n        this.villRegretSum[i] > 0 ? this.villRegretSum[i] * 1.0 : 0.0;\n      normalizingSumOpp += this.villStrategy[i];\n    }\n    if (normalizingSumOpp === 0) {\n      let randomStrat = this.getRandomStrat();\n      this.villStrategy = randomStrat;\n      normalizingSumOpp = 1;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      this.villStrategy[i] /= normalizingSumOpp;\n      this.villStrategySum[i] += this.villStrategy[i];\n    }\n    return this.villStrategy;\n  }\n\n  getAction(strategy) {\n    let rand = Math.random();\n    let i = 0;\n    let cumulativeProbability = 0;\n    while (i < 2) {\n      cumulativeProbability += strategy[i];\n      if (rand < cumulativeProbability) break;\n      i++;\n    }\n    return i;\n  }\n\n  train(iterations) {\n    let actionUtility = [];\n    let villActionUtility = [];\n    let strategy, heroAction, villStrategy, villainAction;\n    for (let i = 0; i < iterations; i++) {\n      strategy = this.getStrategy();\n      heroAction = this.getAction(strategy);\n      villStrategy = this.getVillStrategy();\n      villainAction = this.getAction(this.villStrategy);\n\n      actionUtility[villainAction] = 0;\n      actionUtility[villainAction === 2 ? 0 : villainAction + 1] = 1;\n      actionUtility[villainAction === 0 ? 2 : villainAction - 1] = -1;\n      villActionUtility[heroAction] = 0;\n      villActionUtility[heroAction === 3 - 1 ? 0 : heroAction + 1] = 1;\n      villActionUtility[heroAction === 0 ? 3 - 1 : heroAction - 1] = -1;\n\n      for (let j = 0; j < 3; j++) {\n        this.regretSum[j] += actionUtility[j] - actionUtility[heroAction];\n        this.villRegretSum[j] +=\n          villActionUtility[j] - villActionUtility[villainAction];\n        if (i % 100 === 0) this.setRegretSum([...this.regretSum]);\n      }\n    }\n  }\n  getRandomStrat() {\n    let action1 = Math.random();\n    let action2 = Math.random();\n    let action3 = Math.random();\n    let sum = action1 + action2 + action3;\n    return [action1 / sum, action2 / sum, action3 / sum];\n  }\n\n  getAvgStrategy() {\n    let avgStrategy = [0, 0, 0];\n    let normalizingSum = this.strategySum.reduce((a, b) => a + b);\n\n    for (let i = 0; i < 3; i++) {\n      if (normalizingSum > 0)\n        avgStrategy[i] = this.strategySum[i] / normalizingSum;\n      else avgStrategy[i] = 0.333333333;\n    }\n    return avgStrategy;\n  }\n}\n\nexport default RPSSolverSelfTrain;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { updateRegrets } from './store';\nimport VillainStratForm from './components/villStratForm';\nimport RegretVisualizer from './components/regretVisualizer';\nimport RPSSolver from './RPSSolverSelfTrain';\n\nimport './rps.css';\n\nlet _go = true;\nlet _regrets = [0, 0, 0]\n\nfunction RPSSolverInterface({ updateRegrets }) {\n  let [villStrat, setVillStrat] = useState([.3333333, .3333333, .333333])\n  let [regretsHistory, setRegretsHistory] = useState([]);\n  let [iterations, setIterations] = useState(1000);\n  let [shouldRun, setShouldRun] = useState(false);\n  let [monkey, rerender] = useState(false);\n  \n  let i = 0;\n  let regretMap = {};\n  const setRegretSum = regrets => {\n    i++;\n    updateRegrets(regrets);\n  }\n  let avgStrat = [0,0,0]\n\n  if (shouldRun) {\n    let solver = new RPSSolver(villStrat, setRegretSum);\n    solver.train(iterations);\n    avgStrat = solver.getAvgStrategy();\n  }\n\n  const handleChange = evt => {\n    setIterations(evt.target.value);\n  }\n\n  const runSolver = () => {\n    if (shouldRun === false) {\n      setShouldRun(true);\n    } else {\n      rerender(!monkey); \n    }\n  }\n\n  return (\n    <div>\n      <div className=\"controls\">\n        <button id=\"rps-run-btn\" onClick={() => runSolver()}>\n          RUN\n          </button>\n        <div id=\"rps-iterations\">\n          <div>ITERATIONS</div>\n      <form >\n        <label>\n          <input\n            type=\"text\"\n            id=\"\"\n            value={iterations}\n            onChange={handleChange}\n          />\n        </label>\n      </form>\n          </div>\n      <VillainStratForm strat={avgStrat} setStrat={setVillStrat} />\n        </div>\n      <RegretVisualizer regrets={regretMap} />\n    </div>\n  )\n}\n\nexport default connect(null, { updateRegrets })(RPSSolverInterface)\n","class InformationSet {\n  constructor() {\n    this.cumulativeRegrets = [0, 0];\n    this.strategySum = [0, 0];\n  }\n\n  normalize(strategy) {\n    let normalized = strategy.slice();\n    const sum = strategy.reduce((a,b) => a+b);\n    if (sum > 0) {\n      for (let i = 0; i < 2; i++) {\n        normalized[i] /= sum; \n      }\n    } else {\n      normalized = [0.5, 0.5];\n    }\n    return normalized;\n  }\n\n  getStrategy(reachProb) {\n    let strategy = Math.max(0, this.cumulativeRegrets);\n    let norm = this.normalize(strategy);\n    // let reachStrat = \n\n  }\n\n}\n\nclass KuhnSolver {\n  hello() {\n    return 'Hello World'\n  }\n}\n\nexport default KuhnSolver;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport KuhnSolver from './KuhnSolver';\n\nimport './kuhn.css';\n\nfunction KuhnSolverInterface() {\n  let solver = new KuhnSolver();\n\n  return (\n    <div>\n      {solver.hello().repeat(5)}\n      </div>\n  )\n}\n\nexport default KuhnSolverInterface;\n","import React from 'react';\n\nimport './navbar.css';\n\nexport default function Navbar({selected, setSelected}) {\n  const renderButton = (text, idx) => {\n    let isSelected = idx === selected;\n    let styling = isSelected ? 'nav-btn nav-selected' : 'nav-btn';\n    return (\n      <button onClick={() => setSelected(idx)} className={styling}>\n        {text}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"navbar\">\n      {['RPS', 'Kuhn Poker', 'MW Kuhn', `Leduc Hold'em`].map(renderButton)}\n    </div>\n  );\n}\n","import RPSSolverInterface from './rps';\nimport KuhnSolverInterface from './kuhn';\nimport Navbar from './components/navbar';\nimport React, { useState } from 'react';\n\nimport './App.css';\n\nfunction App() {\n  let [selected, setSelected] = useState(1);\n  let solvers = [\n    <RPSSolverInterface />, <KuhnSolverInterface />\n  ]\n  let currentSolver = solvers[selected % solvers.length];\n\n\n  return (\n    <div className=\"App\">\n      <Navbar selected={selected} setSelected={setSelected} />\n        {currentSolver}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport rps from './rps/store'\n\nconst reducer = combineReducers({rps})\nconst middleware = composeWithDevTools(\n  applyMiddleware(thunkMiddleware, createLogger({collapsed: true}))\n)\nconst store = createStore(reducer, middleware)\n\nexport default store\nexport * from './rps/store'\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}