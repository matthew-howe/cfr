{"version":3,"sources":["rps/store.js","rps/components/villStratForm.js","rps/components/regretVisualizer.js","rps/RPSSolverSelfTrain.js","rps/index.js","kuhn/KuhnSolver.js","kuhn/index.js","components/navbar.js","mwkuhn/MWKuhnSolver.js","mwkuhn/index.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["UPDATE_REGRETS","initialState","count","regrets","VillainStratForm","strat","handleSubmit","handleChange","evt","className","onSubmit","type","id","value","toFixed","onChange","RegretVisualizer","prevProps","this","props","map","el","regretsRock","name","data","regretsPaper","regretsScissors","i","key","allRegrets","console","log","Component","connect","state","rps","RPSSolverSelfTrain","villainStrategy","setRegretSum","strategy","regretSum","strategySum","bind","villStrategy","villRegretSum","villStrategySum","normalizingSum","randomStrat","getRandomStrat","normalizingSumOpp","rand","Math","random","cumulativeProbability","iterations","heroAction","villainAction","actionUtility","villActionUtility","getStrategy","getAction","getVillStrategy","j","action1","action2","action3","sum","avgStrategy","reduce","a","b","updateRegrets","useState","villStrat","setVillStrat","setIterations","shouldRun","setShouldRun","monkey","rerender","avgStrat","solver","RPSSolver","train","getAvgStrategy","onClick","target","setStrat","InformationSet","cumulativeRegrets","normalized","slice","reachProb","weightedStrat","normalize","KuhnSolver","infoSetMap","actions","history","includes","cards","payoff","activePlayer","length","playerCard","villCard","cardAndHistory","reachProbs","isTerminal","getPayoff","myCard","infoSet","getInformationSet","villain","counterfactualVals","actionProb","newReachProbs","cfr","nodeValue","acc","idx","k","val2","val","util","kuhnCards","getRandomSubarray","arr","size","temp","index","shuffled","floor","KuhnSolverInterface","results","sorteddivs","c","push","html","card","sort","unshift","splice","Navbar","selected","setSelected","text","styling","MWKuhnSolver","hello","MWKuhnSolverInterface","repeat","App","solvers","currentSolver","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","newState","Object","assign","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","createLogger","collapsed","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41315746.chunk.js","sourcesContent":["const UPDATE_REGRETS = 'UPDATE_REGRETS';\r\n\r\nconst initialState = {\r\n  count: 0,\r\n  regrets: [],\r\n};\r\n\r\nexport const updateRegrets = (regrets) => ({\r\n    type: UPDATE_REGRETS,\r\n    regrets: regrets,\r\n});\r\n\r\n\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_REGRETS:\r\n      let newState = Object.assign({}, state)\r\n      newState.regrets.push(action.regrets);\r\n      newState.count = state.count +1;\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function VillainStratForm({strat}) {\r\n  function handleSubmit() {}\r\n\r\n  function handleChange(evt) {}\r\n  return (\r\n    <div className=\"rps-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"rfreq\"\r\n            value={strat[0].toFixed(2)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"pfreq\"\r\n            value={strat[1].toFixed(2)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"sfreq\"\r\n            value={strat[2].toFixed(2)}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { LineChart, PieChart } from 'react-chartkick'\r\nimport 'chart.js'\r\n\r\nclass RegretVisualizer extends Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n    }\r\n  }\r\n\r\n  renderRegrets(regrets) {\r\n    return regrets.map(el => {\r\n      return (\r\n        <div>\r\n          <span>\r\n            {el[0]}\r\n            </span> \r\n          <span>\r\n            {el[1]}\r\n            </span> \r\n          <span>\r\n            {el[2]}\r\n            </span>\r\n          </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const regretsRock = {name: \"Rock\", data: {}}\r\n    const regretsPaper = {name: \"Paper\", data: {}}\r\n    const regretsScissors = {name: \"Scissors\", data: {}}\r\n    let i = 0;\r\n    for (const key in this.props.regrets) {\r\n      regretsRock.data[i] = this.props.regrets[key][0];\r\n      regretsPaper.data[i] = this.props.regrets[key][1];\r\n      regretsScissors.data[i] = this.props.regrets[key][2];\r\n      i++\r\n    }\r\n    const allRegrets = [regretsRock, regretsPaper, regretsScissors];\r\n    console.log(allRegrets);\r\n\r\n    return <LineChart data={allRegrets} />\r\n  }\r\n}\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    regrets: state.rps.regrets\r\n  }\r\n}\r\n\r\nexport default connect(mapState)(RegretVisualizer);\r\n","const ROCK = 0;\r\nconst PAPER = 1;\r\nconst SCISSORS = 2;\r\n\r\nclass RPSSolverSelfTrain {\r\n  constructor(villainStrategy, setRegretSum) {\r\n    this.strategy = [0, 0, 0];\r\n    this.regretSum = [0, 0, 0];\r\n    this.strategySum = [0, 0, 0];\r\n    this.villainStrategy = villainStrategy;\r\n    this.setRegretSum = setRegretSum.bind(this);\r\n\r\n    this.villStrategy = [0, 0, 0];\r\n    this.villRegretSum = [0, 0, 0];\r\n    this.villStrategySum = [0, 0, 0];\r\n  }\r\n\r\n  getStrategy() {\r\n    let normalizingSum = 0;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      this.strategy[i] = this.regretSum[i] > 0 ? this.regretSum[i] : 0;\r\n      normalizingSum += this.strategy[i];\r\n    }\r\n\r\n    if (normalizingSum === 0) {\r\n      let randomStrat = this.getRandomStrat();\r\n      console.log('New random strat created: ', randomStrat);\r\n      this.strategy = randomStrat;\r\n      normalizingSum = 1;\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      this.strategy[i] /= normalizingSum;\r\n      this.strategySum[i] += this.strategy[i];\r\n    }\r\n    return this.strategy;\r\n  }\r\n\r\n  getVillStrategy() {\r\n    let normalizingSumOpp = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      this.villStrategy[i] =\r\n        this.villRegretSum[i] > 0 ? this.villRegretSum[i] * 1.0 : 0.0;\r\n      normalizingSumOpp += this.villStrategy[i];\r\n    }\r\n    if (normalizingSumOpp === 0) {\r\n      let randomStrat = this.getRandomStrat();\r\n      this.villStrategy = randomStrat;\r\n      normalizingSumOpp = 1;\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      this.villStrategy[i] /= normalizingSumOpp;\r\n      this.villStrategySum[i] += this.villStrategy[i];\r\n    }\r\n    return this.villStrategy;\r\n  }\r\n\r\n  getAction(strategy) {\r\n    let rand = Math.random();\r\n    let i = 0;\r\n    let cumulativeProbability = 0;\r\n    while (i < 2) {\r\n      cumulativeProbability += strategy[i];\r\n      if (rand < cumulativeProbability) break;\r\n      i++;\r\n    }\r\n    return i;\r\n  }\r\n\r\n  train(iterations) {\r\n    let actionUtility = [];\r\n    let villActionUtility = [];\r\n    let strategy, heroAction, villStrategy, villainAction;\r\n    for (let i = 0; i < iterations; i++) {\r\n      strategy = this.getStrategy();\r\n      heroAction = this.getAction(strategy);\r\n      villStrategy = this.getVillStrategy();\r\n      villainAction = this.getAction(this.villStrategy);\r\n\r\n      actionUtility[villainAction] = 0;\r\n      actionUtility[villainAction === 2 ? 0 : villainAction + 1] = 1;\r\n      actionUtility[villainAction === 0 ? 2 : villainAction - 1] = -1;\r\n      villActionUtility[heroAction] = 0;\r\n      villActionUtility[heroAction === 3 - 1 ? 0 : heroAction + 1] = 1;\r\n      villActionUtility[heroAction === 0 ? 3 - 1 : heroAction - 1] = -1;\r\n\r\n      for (let j = 0; j < 3; j++) {\r\n        this.regretSum[j] += actionUtility[j] - actionUtility[heroAction];\r\n        this.villRegretSum[j] +=\r\n          villActionUtility[j] - villActionUtility[villainAction];\r\n        if (i % 100 === 0) this.setRegretSum([...this.regretSum]);\r\n      }\r\n    }\r\n  }\r\n  getRandomStrat() {\r\n    let action1 = Math.random();\r\n    let action2 = Math.random();\r\n    let action3 = Math.random();\r\n    let sum = action1 + action2 + action3;\r\n    return [action1 / sum, action2 / sum, action3 / sum];\r\n  }\r\n\r\n  getAvgStrategy() {\r\n    let avgStrategy = [0, 0, 0];\r\n    let normalizingSum = this.strategySum.reduce((a, b) => a + b);\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      if (normalizingSum > 0)\r\n        avgStrategy[i] = this.strategySum[i] / normalizingSum;\r\n      else avgStrategy[i] = 0.333333333;\r\n    }\r\n    return avgStrategy;\r\n  }\r\n}\r\n\r\nexport default RPSSolverSelfTrain;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateRegrets } from './store';\r\nimport VillainStratForm from './components/villStratForm';\r\nimport RegretVisualizer from './components/regretVisualizer';\r\nimport RPSSolver from './RPSSolverSelfTrain';\r\n\r\nimport './rps.css';\r\n\r\n\r\nfunction RPSSolverInterface({ updateRegrets }) {\r\n  let [villStrat, setVillStrat] = useState([.3333333, .3333333, .333333])\r\n  let [iterations, setIterations] = useState(1000);\r\n  let [shouldRun, setShouldRun] = useState(false);\r\n  let [monkey, rerender] = useState(false);\r\n  \r\n  let regretMap = {};\r\n  const setRegretSum = regrets => {\r\n    updateRegrets(regrets);\r\n  }\r\n  let avgStrat = [0,0,0]\r\n\r\n  if (shouldRun) {\r\n    let solver = new RPSSolver(villStrat, setRegretSum);\r\n    solver.train(iterations);\r\n    avgStrat = solver.getAvgStrategy();\r\n  }\r\n\r\n  const handleChange = evt => {\r\n    setIterations(evt.target.value);\r\n  }\r\n\r\n  const runSolver = () => {\r\n    if (shouldRun === false) {\r\n      setShouldRun(true);\r\n    } else {\r\n      rerender(!monkey); \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"controls\">\r\n        <button id=\"rps-run-btn\" onClick={() => runSolver()}>\r\n          RUN\r\n          </button>\r\n        <div id=\"rps-iterations\">\r\n          <div>ITERATIONS</div>\r\n      <form >\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"\"\r\n            value={iterations}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n          </div>\r\n      <VillainStratForm strat={avgStrat} setStrat={setVillStrat} />\r\n        </div>\r\n      <RegretVisualizer regrets={regretMap} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(null, { updateRegrets })(RPSSolverInterface)\r\n","class InformationSet {\r\n  constructor() {\r\n    this.cumulativeRegrets = [0, 0];\r\n    this.strategySum = [0, 0];\r\n  }\r\n\r\n  normalize(strategy) {\r\n    let normalized = strategy.slice();\r\n    const sum = strategy.reduce((a, b) => a + b);\r\n    if (sum > 0) {\r\n      for (let i = 0; i < 2; i++) {\r\n        normalized[i] /= sum;\r\n      }\r\n    } else {\r\n      normalized = [0.5, 0.5];\r\n    }\r\n    return normalized;\r\n  }\r\n\r\n  getStrategy(reachProb) {\r\n    let strategy = this.cumulativeRegrets.map(el => (el > 0 ? el : 0));\r\n    let normalizedStrat = this.normalize(strategy);\r\n    let weightedStrat = normalizedStrat.map(el => el * reachProb);\r\n    for (let i = 0; i < 2; i++) {\r\n      this.strategySum[i] += weightedStrat[i];\r\n    }\r\n\r\n    return weightedStrat;\r\n  }\r\n\r\n  getAvgStrategy() {\r\n    return this.normalize(this.strategySum.slice());\r\n  }\r\n}\r\n\r\nclass KuhnSolver {\r\n  constructor() {\r\n    this.infoSetMap = {};\r\n    this.actions = ['B', 'C'];\r\n  }\r\n\r\n  hello() {\r\n    return 'Hello World';\r\n  }\r\n\r\n  isTerminal(history) {\r\n    return ['BC', 'BB', 'CC', 'CBB', 'CBC'].includes(history);\r\n  }\r\n\r\n  getPayoff(history, cards) {\r\n    if (['BC', 'CBC'].includes(history)) {\r\n      return +1;\r\n    } else {\r\n      let payoff = history.includes('B') ? 2 : 1;\r\n      let activePlayer = history.length % 2;\r\n      let playerCard = cards[activePlayer];\r\n      let villCard = cards[(activePlayer + 1) % 2];\r\n      if (playerCard === 'K' || villCard === 'J') {\r\n        return payoff;\r\n      } else {\r\n        return -payoff;\r\n      }\r\n    }\r\n  }\r\n\r\n  getInformationSet(cardAndHistory) {\r\n    if (!this.infoSetMap[cardAndHistory]) {\r\n      this.infoSetMap[cardAndHistory] = new InformationSet();\r\n    }\r\n    return this.infoSetMap[cardAndHistory];\r\n  }\r\n\r\n  cfr(cards, history, reachProbs, activePlayer) {\r\n    if (this.isTerminal(history)) {\r\n      return this.getPayoff(history, cards);\r\n    }\r\n\r\n    let myCard = cards[activePlayer];\r\n    let infoSet = this.getInformationSet(myCard + history);\r\n    let strategy = infoSet.getStrategy(reachProbs[activePlayer]);\r\n    let villain = (activePlayer + 1) % 2;\r\n    let counterfactualVals = [0, 0];\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      let actionProb = strategy[i];\r\n      let newReachProbs = reachProbs.slice();\r\n\r\n      // compute new reach probabilities after this action\r\n      newReachProbs[activePlayer] *= actionProb;\r\n\r\n      // recursively call cfr method, next player is the villain\r\n      counterfactualVals[i] = -this.cfr(\r\n        cards,\r\n        history + this.actions[i],\r\n        newReachProbs,\r\n        villain,\r\n      );\r\n    }\r\n\r\n    // value of the curent game state is just counterfactual values\r\n    // weighted by action probabilities\r\n    let nodeValue = counterfactualVals.reduce((acc, el, idx) => {\r\n      return acc +(el * strategy[idx]);\r\n    }, 0);\r\n\r\n    for (let k = 0; k < 2; k++) {\r\n      let val = counterfactualVals[k] - nodeValue;\r\n      let val2;\r\n      val2 = reachProbs[villain] * val;\r\n      infoSet.cumulativeRegrets[k] += val2;\r\n    }\r\n    return nodeValue;\r\n  }\r\n\r\n  train(iterations) {\r\n    let util = 0;\r\n    let kuhnCards = ['J', 'Q', 'K'];\r\n    for (let i = 0; i < iterations; i++) {\r\n      let cards = this.getRandomSubarray(kuhnCards, 2);\r\n      let history = '';\r\n      let reachProbs = [1, 1];\r\n      util += this.cfr(cards, history, reachProbs, 0);\r\n    }\r\n    return util;\r\n  }\r\n\r\n  getRandomSubarray(arr, size) {\r\n    var shuffled = arr.slice(0),\r\n      i = arr.length,\r\n      temp,\r\n      index;\r\n    while (i--) {\r\n      index = Math.floor((i + 1) * Math.random());\r\n      temp = shuffled[index];\r\n      shuffled[index] = shuffled[i];\r\n      shuffled[i] = temp;\r\n    }\r\n    return shuffled.slice(0, size);\r\n  }\r\n}\r\n\r\nexport default KuhnSolver;\r\n","import React, { useState } from 'react';\r\nimport KuhnSolver from './KuhnSolver';\r\nimport './kuhn.css';\r\n\r\nfunction KuhnSolverInterface() {\r\n  let [iterations, setIterations] = useState(1000);\r\n  let solver = new KuhnSolver();\r\n  solver.train(iterations)\r\n\r\n  let results = [];\r\n  let sorteddivs = [];\r\n\r\n  // rendering array of average strategy profiles\r\n  for (let key in solver.infoSetMap) {\r\n    let b = solver.infoSetMap[key].getAvgStrategy()[0].toFixed(2)\r\n    let c = solver.infoSetMap[key].getAvgStrategy()[1].toFixed(2)\r\n    results.push({\r\n        html: (<div>{key} &emsp;&emsp;&emsp;{b} &emsp;&emsp;&emsp;{c}</div>),\r\n        card: key}\r\n    )\r\n  }\r\n  results = results.sort((a, b) => {\r\n    if (a.card.length < b.card.length) return -1\r\n    else if (b.card.length < a.card.length) return 1\r\n    else if (a.card < b.card) return -1\r\n    else if (b.card < a.card) return 1\r\n    else return 0;\r\n  })\r\n  for (let i = 0; i < results.length; i++) sorteddivs.push(results[i].html);\r\n  sorteddivs.unshift(<div>CARDS &emsp; BET/CALL &emsp; CHECK/FOLD</div>)\r\n  sorteddivs.unshift(<h4> FIRST ACTION</h4>)\r\n  sorteddivs.splice(5,0, <h4> SECOND ACTION </h4>)\r\n  sorteddivs.splice(6,0, <div>CARDS &emsp; BET/CALL &emsp; CHECK/FOLD</div>)\r\n  sorteddivs.splice(13,0, <h4> THIRD ACTION </h4>)\r\n  sorteddivs.splice(14,0, <div>CARDS &emsp; BET/CALL &emsp; CHECK/FOLD</div>)\r\n\r\n  const handleChange = evt => setIterations(evt.target.value);\r\n\r\n  // rendering fix\r\n  let [shouldRun, setShouldRun] = useState(false);\r\n  let [monkey, rerender] = useState(false);\r\n  const runSolver = () => {\r\n    if (shouldRun === false) {\r\n      setShouldRun(true);\r\n    } else {\r\n      rerender(!monkey); \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"controls\">\r\n        <button id=\"rps-run-btn\" onClick={() => runSolver()}>\r\n          RUN\r\n          </button>\r\n        <div id=\"rps-iterations\">\r\n          <div>ITERATIONS</div>\r\n      <form >\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            value={iterations}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {sorteddivs}\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default KuhnSolverInterface;\r\n","import React from 'react';\r\n\r\nimport './navbar.css';\r\n\r\nexport default function Navbar({selected, setSelected}) {\r\n  const renderButton = (text, idx) => {\r\n    let isSelected = idx === selected;\r\n    let styling = isSelected ? 'nav-btn nav-selected' : 'nav-btn';\r\n    return (\r\n      <button onClick={() => setSelected(idx)} className={styling}>\r\n        {text}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      {['RPS', 'Kuhn Poker', 'MW Kuhn', `Leduc Hold'em`].map(renderButton)}\r\n    </div>\r\n  );\r\n}\r\n","class MWKuhnSolver {\n  constructor() {\n    this.hello = 'hello world'\n  }\n}\n\nexport default MWKuhnSolver;\n","import React, { useState } from 'react';\nimport MWKuhnSolver from './MWKuhnSolver';\nimport './mwkuhn.css';\n\nfunction MWKuhnSolverInterface() {\n  let [iterations, setIterations] = useState(1000);\n  let solver = new MWKuhnSolver();\n\n  return (\n    <div>\n    {solver.hello.repeat((iterations / 1000) * 3)}\n    </div>\n  )\n}\n\nexport default MWKuhnSolverInterface;\n","import RPSSolverInterface from './rps';\r\nimport KuhnSolverInterface from './kuhn';\r\nimport Navbar from './components/navbar';\r\nimport React, { useState } from 'react';\r\nimport MWKuhnSolverInterface from './mwkuhn';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  let [selected, setSelected] = useState(2);\r\n  let solvers = [\r\n    <RPSSolverInterface />, <KuhnSolverInterface />, <MWKuhnSolverInterface />\r\n  ]\r\n  let currentSolver = solvers[selected % solvers.length];\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar selected={selected} setSelected={setSelected} />\r\n        {currentSolver}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport rps from './rps/store'\r\n\r\nconst reducer = combineReducers({rps})\r\nconst middleware = composeWithDevTools(\r\n  applyMiddleware(thunkMiddleware, createLogger({collapsed: true}))\r\n)\r\nconst store = createStore(reducer, middleware)\r\n\r\nexport default store\r\nexport * from './rps/store'\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}